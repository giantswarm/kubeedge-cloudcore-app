# This job waits for the cloudcore Service to obtain an external IP
# and then patches the cloudcore ConfigMap to set the advertiseAddress.
#
# This job *only runs during initial install* of the chart.
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ include "resource.default.name" . }}-get-service-ip"
  namespace: "{{ .Release.Namespace }}"
  labels:
    {{- include "labels.common" . | nindent 4 }}
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
    "helm.sh/hook-weight": "15"
spec:
  ttlSecondsAfterFinished: 86400 # 24h
  template:
    metadata:
      name: "{{ include "resource.default.name" . }}-get-service-ip"
      namespace: "{{ $.Release.Namespace }}"
      labels:
        {{- include "labels.common" . | nindent 8 }}
    spec:
      restartPolicy: Never
      serviceAccountName: "{{- include "kubeEdgeServiceHookServiceAccount" . }}"
      securityContext:
        runAsUser: {{ include "securityContext.runAsUser" . }}
        runAsGroup: {{ include "securityContext.runAsGroup" . }}
      containers:
        - name: get-service-ip
          {{- include "jobContainerCommon" . | nindent 10 }}
          command:
            - "/bin/bash"
            - "-c"
            - |
              set -o errexit
              set -o pipefail
              set -o nounset

              # check if cloudcore service exists
              if ! kubectl get service -n {{ .Release.Namespace }} cloudcore > /dev/null 2>&1; then
                echo "cloudcore service does not exist in namespace {{ .Release.Namespace }}, nothing to do."
                exit 0
              fi

              # wait for cloudcore service to get an external IP
              echo "Waiting for cloudcore service to get an external IP."
              for i in {1..12}; do
                CLOUDCORE_IP=$(kubectl get service -n {{ .Release.Namespace }} cloudcore -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
                if [ -n "${CLOUDCORE_IP}" ]; then
                  echo "cloudcore service IP: ${CLOUDCORE_IP}"
                  break
                fi
                echo "Attempt $i of 12: cloudcore service does not have an external IP yet. Retrying in 10 seconds."
                sleep 10
              done

              if [ -z "${CLOUDCORE_IP}" ]; then
                echo "Failed to get cloudcore service IP."
                exit 1
              fi

              # Patch the configmap to inject the service IP into advertiseAddress
              echo "Patching configmap 'cloudcore' to add service IP: ${CLOUDCORE_IP}"

              # Get the current cloudcore.yaml content and update it
              kubectl get configmap -n {{ .Release.Namespace }} cloudcore -o jsonpath='{.data.cloudcore\.yaml}' > /tmp/current-config.yaml
              sed -i "s|- PLACEHOLDER|- ${CLOUDCORE_IP}|" /tmp/current-config.yaml

              # Create a new configmap with the updated content, preserving metadata
              kubectl get configmap -n {{ .Release.Namespace }} cloudcore -o yaml > /tmp/original-configmap.yaml

              # Create the replacement configmap using the updated config
              kubectl create configmap cloudcore --namespace={{ .Release.Namespace }} --from-file=cloudcore.yaml=/tmp/current-config.yaml --dry-run=client -o yaml > /tmp/new-configmap-data.yaml

              # Extract just the data section from the new configmap
              sed -n '/^data:/,$ p' /tmp/new-configmap-data.yaml > /tmp/data-section.yaml

              # Remove the data section from original configmap and append the new data
              sed '/^data:/,$ d' /tmp/original-configmap.yaml > /tmp/updated-configmap.yaml
              cat /tmp/data-section.yaml >> /tmp/updated-configmap.yaml

              # Apply the updated configmap
              if kubectl replace -f /tmp/updated-configmap.yaml; then
                echo "Successfully updated configmap with service IP: ${CLOUDCORE_IP}"

                # Verify the update worked
                if kubectl get configmap -n {{ .Release.Namespace }} cloudcore -o jsonpath='{.data.cloudcore\.yaml}' | grep -q "${CLOUDCORE_IP}"; then
                  echo "Verification successful: Service IP ${CLOUDCORE_IP} found in configmap"
                else
                  echo "Warning: Service IP ${CLOUDCORE_IP} not found in configmap after update"
                fi
              else
                echo "Error: Failed to update configmap. Attempting to restore original..."
                kubectl replace -f /tmp/original-configmap.yaml || echo "Failed to restore original configmap"
                exit 1
              fi
